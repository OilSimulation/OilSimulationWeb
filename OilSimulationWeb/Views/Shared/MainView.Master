<%@ Master Language="C#" Inherits="System.Web.Mvc.ViewMasterPage" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" >
<head runat="server">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> 
    <title><asp:ContentPlaceHolder ID="TitleContent" runat="server" /></title>
    <link href="<%=Url.Content("~/Content/cubes.css")%>" rel="stylesheet" type="text/css" />
    <link href="<%=Url.Content("~/Content/jquery-ui-1.10.2.custom.css")%>" rel="stylesheet" type="text/css" />
    
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/jquery-1.4.1.min.js")%>"></script>
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/libs/three.js")%>"></script>
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/libs/stats.js")%>"></script>
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/libs/dat.gui.js")%>"></script>
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/libs/OrbitControls.js")%>"></script>
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/libs/TrackballControls.js")%>"></script> 
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/Common.js")%>"></script>  
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/Loader.js")%>"></script>   
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/libs/TextGeometry.js")%>"></script>
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/libs/FontUtils.js")%>"></script>
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/libs/helvetiker_regular.typeface.js")%>"></script> 
    <script type="text/javascript" src="<%=Url.Content("~/Scripts/libs/CanvasRenderer.js")%>"></script>
    
    <script type="text/javascript">
    
        var webGLRenderer;
        var camera;
        var scene; 
        var geometry; 
        var myLoader; 
        var mesh;
        //播放速度 
        var interval = 200; 
        var action;
        var mouse;
        var raycaster;
        var scale = 0.1;

        // once everything is loaded, we run our Three.js stuff.
        function init() {
            // 创建和设置渲染器
            webGLRenderer = new THREE.WebGLRenderer({ antialias: true });  //抗锯齿
            //webGLRenderer.setClearColor(new THREE.Color(0x666666, 1.0));
            webGLRenderer.setSize(window.innerWidth, window.innerHeight);
            webGLRenderer.shadowMapEnabled = true;


            // 创建场景, that will hold all our elements such as objects, cameras and lights.
            scene = new THREE.Scene();
            raycaster = new THREE.Raycaster();
			mouse = new THREE.Vector2();

            //var axes = new THREE.AxisHelper(5);
            //scene.add(axes);

            // 创建和设置相机
            camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 50000);


            var modelIndex =$("#ModeIndex").val();
            // position and point the camera to the center of the scene
            if(modelIndex==421)
            {
                camera.position.set(0, 0, 1200);
            }
            else if(modelIndex==212)
            {
                camera.position.set(0, 0, 50);
            }
            else if(modelIndex==11||modelIndex==12||modelIndex==13||modelIndex==211||modelIndex==213||modelIndex==214)
            {
                camera.position.set(0, 0, 100);
            }
            else 
            {
                camera.position.set(0, 0, 200);
            }

            // 相机的上方向设置为(0,1,0)即y轴方向;
            camera.up.set(0, 1, 0);
            // 相机的视野中心坐标
            //camera.lookAt(new THREE.Vector3(0, 0, 0));
            //camera.lookAt({x:0, y:0, z:0});
            camera.lookAt(scene.position);
            //scene.add(camera);
     
            //OrbitControls
            var controls = new THREE.OrbitControls(camera, webGLRenderer.domElement);
            //controls.target.set(0, 0, 0); 

            
            var stats = initStats();

            // 设置环境光源
            var ambi = new THREE.AmbientLight(0x33ccff);
            //scene.add(ambi);

            // 设置聚光灯
            var spotLight = new THREE.DirectionalLight(0xffffff);
            spotLight.position.set(0, 0, 0);
            spotLight.intensity = 0.5;
            scene.add(spotLight); 
            
            myLoader = new THREE.MyLoader();

            // add the output of the renderer to the html element
            document.getElementById("WebGL-output").appendChild(webGLRenderer.domElement);

            document.addEventListener( 'mousedown', onDocumentMouseDown, false );

         
            // call the render function 
            var reload = true; 
            render(); 
            
            //渲染
            function render() {

                stats.update(); 
                if (reload) {
                    reload = false;
                    LoadWebGLData(0);  
                }
            
                controls.update(); 
                // render using requestAnimationFrame
                camera.lookAt(new THREE.Vector3(0, 0, 0));

                requestAnimationFrame(render);

                webGLRenderer.render(scene, camera); 
            }

            function initStats() {

                var stats = new Stats();

                stats.setMode(0); // 0: fps, 1: ms

                // Align top-left
                stats.domElement.style.position = 'absolute';
                stats.domElement.style.left = '0px';
                stats.domElement.style.top = '0px';

                document.getElementById("Stats-output").appendChild(stats.domElement);

                return stats;
            }

            //参数选择
            $("#paramSelect").change(function () 
            {
                var curIndex = $("#paramSelect option:selected").val();
                if (parseInt(curIndex) > 4) 
                {
                    $(".ui-button").attr("disabled", "disabled");
                } 
                else 
                {
                    $(".ui-button").removeAttr("disabled");
                }
            })
            //步数选择
            $("#timeSelect").change(function () {
                var curIndex = $("#timeSelect option:selected").val();
                //下一步失效
                if (curIndex == $("#timeSelect >option").length - 1) 
                {
                    $("#button_play").attr("disabled", "disabled");
                    $("#button_forward").attr("disabled", "disabled");
                } 
                else 
                {
                    $("#button_play").removeAttr("disabled");
                    $("#button_forward").removeAttr("disabled"); 
                }
                //上一步失效
                if (parseInt(curIndex) == 0) 
                {
                    $("#button_backward").attr("disabled", "disabled");
                } 
                else 
                {
                    $("#button_backward").removeAttr("disabled");
                }
            });
            //时间步或者参数变更触发事件
            $(".select").change(function () { LoadWebGLData(1); });

            //播放按钮
            $("#button_play").click(function (){
                if (action) {
                    $(this).attr("title","播放");
                    $(".ui-icon-pause").removeClass("ui-icon-pause").addClass("ui-icon-play");
                    window.clearInterval(action);
                    action = undefined;
                }
                else
                { 
                    $(this).attr("title","暂停");
                    $(".ui-icon-play").removeClass("ui-icon-play").addClass("ui-icon-pause");
                    action = setInterval(function () {
                        var curIndex = $("#timeSelect option:selected").val();
                        var nextIndex = parseInt(curIndex) + 1;
                        if (nextIndex < $("#timeSelect > option").length) 
                        {
                            $("#timeSelect").val((nextIndex).toString()).change();
                            curIndex = nextIndex;
                        }
                        else 
                        {
                            if (action) 
                            {
                                window.clearInterval(action);
                            }
                        }
                    }, interval);
                 }
                 //#endif
            });

            //初始化按钮事件
            $("#button_reset").click(function(){
                $("#timeSelect").val("0").change();   
            });

            //上一步按钮事件
            $("#button_backward").click(function(){
                $("#timeSelect").val( parseInt($("#timeSelect option:selected").val())-1 ).change();   
            });

            //下一步按钮事件
            $("#button_forward").click(function(){
                $("#timeSelect").val( parseInt($("#timeSelect option:selected").val())+1 ).change();
            }); 

            //绑定全屏模式点击响应函数
            $("#fullscreen").click(function (){
                if($("#fullText").text()=="全屏模式")
                {
                    $("#fullText").text("退出全屏"); 
                    parent.postMessage("ScreenMax()", "*");
                }
                else
                {
                    $("#fullText").text("全屏模式");
                    parent.postMessage("ScreenNomal()", "*");
                }
            });
        }  

        //执行批处理命令
        function ExcutBatCommand()
        { 
            var mIndex = $("#ModeIndex").val();  
            $.post('<%:Url.Action("ExecBatCommand","Bussiness") %>' , { Mode: mIndex },
                    function (data) { 
                        LoadWebGLData(0);
                    }); 
        }

        //加载数据
        function LoadWebGLData(isFirstLoad) { 
            var paramValue = $("#paramSelect option:selected").text();
            var timeValue = $("#timeSelect option:selected").val();
            //固定获取DATA的URL
            var sUrl = '<%:Url.Action("GetData","Business") %>';
            var mIndex = $("#ModeIndex").val();  
            //组装JSON数据
            var jsonData = {Para:paramValue,Mode:mIndex,Step:timeValue,iLoadFirst:isFirstLoad}; 
            myLoader.load(sUrl, JSON.stringify(jsonData) ,function (loadedMesh) {
                if (isFirstLoad==0) { 
                    loadedMesh.children.forEach(function (child) { }); 
                    mesh = loadedMesh; 
                    
                    loadedMesh.scale.set(scale, scale, scale);
                    //loadedMesh.rotation.x = -0.3;
                    scene.add(mesh);
                }
            }); 
        }

        function onResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            webGLRenderer.setSize(window.innerWidth, window.innerHeight);
        }

        function onDocumentMouseDown( event ) {

            
	        event.preventDefault();

	        mouse.x = ( event.clientX / webGLRenderer.domElement.clientWidth ) * 2 - 1;
	        mouse.y = - ( event.clientY / webGLRenderer.domElement.clientHeight ) * 2 + 1;

	        raycaster.setFromCamera( mouse, camera );

	        var intersects = raycaster.intersectObjects( mesh.children );

	        if ( intersects.length > 0 ) {


                var m = new THREE.MeshBasicMaterial({color:0xffff00,vertexColors:THREE.NoColors});

                var f = myLoader.AddWell(intersects[ 0 ].point.x,intersects[ 0 ].point.y,intersects[ 0 ].point.z,10,0,0);
                f.scale.set(scale,scale,scale);
                //scene.add(f);

	        }

        }



        window.onload = init;
        // listen to the resize events
        window.addEventListener('resize', onResize, false);
        //解决跨域HideLoading();
        window.addEventListener("message", function (event) { eval(event.data); }); 
    </script>
</head>
<body>
    <div id="controls_container_r" style="display: inline-block; ">
		<div id="controls_innercontainer">  
			<div class="controls">
				<legend>操作面板</legend>
				<ul> 
					<li>
						<div id="button_toolbar">
							<button id="button_reset" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" role="button" aria-disabled="false" title="初始化"><span class="ui-button-icon-primary ui-icon ui-icon-seek-start"></span><span class="ui-button-text">初始化</span></button>
							<button id="button_play" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" role="button" aria-disabled="false" title="播放"><span class="ui-button-icon-primary ui-icon ui-icon-play"></span><span class="ui-button-text">播放</span></button>
							<button id="button_backward" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" role="button" aria-disabled="false" title="上一步"><span class="ui-button-icon-primary ui-icon ui-icon-seek-prev"></span><span class="ui-button-text">上一步</span></button>
							<button id="button_forward" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" role="button" aria-disabled="false" title="下一步"><span class="ui-button-icon-primary ui-icon ui-icon-seek-next"></span><span class="ui-button-text">下一步</span></button>
						</div>
					</li>

					<li>
						<div class="mini_label">网格数#:</div>
						<div class="mini_field"><% =ViewData["TotalGrids"]%></div>
						<div class="mini_label">Speed:</div>
						<div id="playback_speed_field" class="mini_field">1.0x</div>
					</li> 
					<li class="spacer"></li>
					<li>
						<div class="label">参数选择:</div>
						<div class="control">
							<select id="paramSelect" class="select"> 
                            <% List<String> opts= (List<String>)ViewData["DynamicProps"];
                                for (int i = 0; i <opts.Count; i++)
                                { %>
                                    <option value="<%:i %>"><%:opts[i] %></option>
                                <% } %>
							</select>
						</div>
					</li>
					<li class="spacer"></li>
					<li>
						<div class="label">当前时间步:</div>
						<div class="control">
							<select id="timeSelect" class="select">
								<% String[] timeOpts = (String[])ViewData["TimeStep"];
                                for (int i = 0; i < timeOpts.Length; i++)
                                { %>
                                    <option value="<%:i%>"><%:timeOpts[i]%></option>
                                <% } %> 
							</select>
						</div>
					</li>
					<li class="spacer"></li>

				</ul>
						
			</div> 
		</div>
	</div> 




    <span class="right color-gray">
		<a id="fullscreen" href="javascript:void(0);">
			<span id="fullText">全屏模式</span>
		</a>
	</span> 

    <div id="Stats-output">
    </div>
    <!-- Div which will hold the Output -->
    <div id="WebGL-output">
    </div> 
    <asp:ContentPlaceHolder ID="MainContent" runat="server">
        
    </asp:ContentPlaceHolder> 
</body>
</html>
